@using System.Drawing
@inject GameState State

<HeadContent>
    <style>
        :root {
            --board-bg: @ColorTranslator.ToHtml(BoardColor);  
            --player1: @ColorTranslator.ToHtml(Player1Color); 
            --player2:  @ColorTranslator.ToHtml(Player2Color);
        }
    </style>
</HeadContent>

<article>
    @winnerMessage  <button style="@ResetStyle" @onclick="ResetGame">Reset the game</button>
    <br />
    <span class="alert-danger">@errorMessage</span>
    <span class="alert-info">@CurrentTurn</span>
</article>
<nav>
    @for (byte i = 0; i < GameState.BoardColCount; i++)
    {
        var col = i;
        <span title="Click to play a piece" @onclick="() => PlayPiece(col)">ðŸ”½</span>
    }
</nav>
<div>    
   <div class="board">
        @for (var i = 0; i < GameState.BoardCellCount; i++)
        {
            <span class="container">
                <span></span>
            </span>
        }
        @for (var i = 0; i < GameState.BoardCellCount; i++)
        {            
            <span class="@pieces[i]"></span>
        }
   </div>
</div>
<article>
    @((MarkupString)tallyMessage.Replace(Environment.NewLine, "<br />"))
</article>

@code {
    private string[] pieces = new string[GameState.BoardCellCount];
    private string winnerMessage = string.Empty;
    private string errorMessage = string.Empty;
    private string tallyMessage = string.Empty;

    private string CurrentTurn => (winnerMessage == string.Empty) ? $"Player {GetPlayerColorName(State.PlayerTurn)}'s turn" : "";
    private string GetPlayerColorName(int player)
    {        
        return player == 1 ? State.Player1Color : State.Player2Color;
    }
    private string ResetStyle => (winnerMessage == string.Empty) ? "display: none;" : "";
    
    /// <summary>
    /// Returns a string representing the column and drop row for a given board position.
    /// For example: 0 -> "col0 drop1", 6 -> "col6 drop1", 7 -> "col0 drop2", ..., 41 -> "col6 drop6"
    /// </summary>
    private string GetColDropString(int boardIndex)
    {
        int col = boardIndex % GameState.BoardColCount;
        int row = boardIndex / GameState.BoardColCount + 1; // drop rows are 1-based
        return $"col{col} drop{row}";
    }

    /// <summary>
    /// Adds the "winning-piece" class to each element in the pieces array that matches the column and drop row
    /// of the winning pieces.
    /// </summary>
    private void MarkWinningPieces()
    {
        foreach (var index in State.WinningPieces)
        {
            // Get the column and drop row string for this board index
            var colDrop = GetColDropString(index);
    
            // Find the matching element in pieces[] and add " flash-piece" if found
            for (int i = 0; i < pieces.Length; i++)
            {
                if (pieces[i] != null && pieces[i].Contains(colDrop) && !pieces[i].Contains("winning-piece"))
                {
                    pieces[i] += " winning-piece";
                    break; // No need to check other pieces once we found a match
                }
            }
        }
    }

    /// <summary>
    /// Handles the logic for playing a piece in the selected column.
    /// Updates the game state, manages the pieces array for animation,
    /// checks for win or tie conditions, updates the winner and tally messages,
    /// and handles any errors that occur during the move.
    private void PlayPiece(byte col)
    {
        errorMessage = string.Empty;
        try
        {
            var player = State.PlayerTurn;
            var turn = State.CurrentTurn;
            var landingRow = State.PlayPiece(col);
            pieces[turn] = $"player{player} col{col} drop{landingRow}";
        }
        catch (ArgumentException ex)
        {
            errorMessage = ex.Message;
        }
        
        var winState = State.CheckForWin();

        switch (winState)
        {
            case GameState.WinState.Player1_Wins:
                State.Player1Wins++;
                winnerMessage = $"Player {GetPlayerColorName(1)} wins!";
                MarkWinningPieces();
                break;
            case GameState.WinState.Player2_Wins:
                State.Player2Wins++;
                winnerMessage = $"Player {GetPlayerColorName(2)} wins!";
                MarkWinningPieces();
                break;
            case GameState.WinState.Tie:
                State.Ties++;
                winnerMessage = "It's a tie!";
                break;
            default:
                winnerMessage = string.Empty;
                break;
        }

        if (!string.IsNullOrEmpty(winnerMessage))
        {
            tallyMessage = $"Player {GetPlayerColorName(1)} wins: {State.Player1Wins}{Environment.NewLine}Player {GetPlayerColorName(2)} wins: {State.Player2Wins}{Environment.NewLine}Ties: {State.Ties}";            
        }
        
    }
    [Parameter]
    public Color BoardColor { get; set; } = ColorTranslator.FromHtml("yellow");

    [Parameter]
    public Color Player1Color { get; set; } = ColorTranslator.FromHtml("red");

    [Parameter]
    public Color Player2Color { get; set; } = ColorTranslator.FromHtml("blue");
    
    protected override void OnInitialized()
    {
        if (State.Player1Color == string.Empty)
        {
            State.Player1Color = Player1Color.IsKnownColor ? Player1Color.Name : ColorTranslator.ToHtml(Player1Color);
            State.Player2Color = Player2Color.IsKnownColor ? Player2Color.Name : ColorTranslator.ToHtml(Player2Color);                    
        }

        tallyMessage = $"Player {GetPlayerColorName(1)} wins: {State.Player1Wins}{Environment.NewLine}Player {GetPlayerColorName(2)} wins: {State.Player2Wins}{Environment.NewLine}Ties: {State.Ties}";
        
        // Initialize the game state
        State.ResetBoard();
    }
    void ResetGame()
    {
        State.ResetBoard();
        State.AlternateStartingPlayer();
        winnerMessage = string.Empty;
        errorMessage = string.Empty;
        pieces = new string[GameState.BoardCellCount];        
    }
}